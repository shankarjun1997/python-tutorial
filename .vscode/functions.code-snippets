
	{
		"Simple Function": {
			"prefix": "simplefn",
			"body": [
				"def ${1:function_name}():",
					"print(\"Hello from ${1:function_name}!\")",
				"",
				"${1:function_name}()"
			],
			"description": "Creates a simple function in Python"
		},
		"Function with Parameters": {
			"prefix": "paramfn",
			"body": [
				"def ${1:function_name}(${2:param1}, ${3:param2}):",
				"    return ${2:param1} + ${3:param2}",
				"",
				"result = ${1:function_name}(${4:5}, ${5:3})",
				"print(f\"Result: {result}\")"
			],
			"description": "Creates a function with parameters"
		},
		"Lambda Function": {
			"prefix": "lambdafn",
			"body": [
				"${1:func_name} = lambda ${2:x}: ${3:x**2}",
				"print(${1:func_name}(${4:5}))"
			],
			"description": "Creates a simple lambda function"
		},
		"Recursive Function (Factorial)": {
			"prefix": "recfn",
			"body": [
				"def factorial(n):",
				"    if n == 0:",
				"        return 1",
				"    return n * factorial(n - 1)",
				"",
				"print(f\"Factorial of 5: {factorial(5)}\")"
			],
			"description": "Creates a recursive function to find factorial"
		}
	}
	// Place your tutorial workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
